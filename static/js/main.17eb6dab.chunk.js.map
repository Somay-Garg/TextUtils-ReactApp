{"version":3,"sources":["components/Navbar.js","components/TextFrom.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","class","onClick","toggleMode","role","htmlFor","TextFrom","useState","text","setText","style","color","heading","value","onChange","event","newText","target","backgroundColor","rows","toUpperCase","showAlert","toLowerCase","copyText","document","getElementById","select","navigator","clipboard","writeText","split","join","length","checkEmptyString","Alert","alert","word","lower","charAt","slice","capitalize","message","defaultProps","about","App","setMode","setAlert","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.17eb6dab.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom'\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <>\r\n          <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n              <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n              <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                <span className=\"navbar-toggler-icon\"></span>\r\n              </button>\r\n              <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                  <li className=\"nav-item\">\r\n                    <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n                  </li>\r\n                  <li className=\"nav-item\">\r\n                    <a className=\"nav-link\" href=\"#\">About</a>\r\n                  </li>\r\n                </ul>\r\n                {/* <form className=\"d-flex\">\r\n                <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n                <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n                </form> */}\r\n                <div class={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n                  <input class=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n                  <label class=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </nav>\r\n        </>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title : PropTypes.string.isRequired,\r\n    about : PropTypes.string \r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title : \"Set title here\",\r\n    about : \"About\"\r\n}\r\n","import React,{useState} from 'react'\r\n\r\nexport default function TextFrom(props) {\r\n    const [text,setText] = useState('');\r\n\r\n    const handleText = (event) => {\r\n        let newText = event.target.value;\r\n        setText(newText);\r\n    }\r\n\r\n    const handleUpText = () => {\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to UpperCase!\",\"success\");\r\n    }\r\n\r\n    const handleLoText = () => {\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to LowerCase!\",\"success\");\r\n    }\r\n\r\n    const handleClearText = () => {\r\n        let newText = \"\";\r\n        setText(newText);\r\n        props.showAlert(\"Text Cleared!\",\"success\");\r\n    }\r\n\r\n    const handleCopyText = () => {\r\n        let copyText = document.getElementById(\"my-box\");\r\n        copyText.select();\r\n        navigator.clipboard.writeText(copyText.value);\r\n        props.showAlert(\"Text copied to Clipboard!\",\"success\");\r\n    }\r\n\r\n    const handleRemoveExtra = (event) => {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"Extra spaces removed!\",\"success\");       \r\n    }\r\n\r\n    const checkEmptyString = (text) => {\r\n        let myArray = text.split(\" \")[text.split(\" \").length-1]?text.split(\" \").length:text.split(\" \",text.split(\" \").length-1).length;\r\n        return myArray;\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color : props.mode==='dark'?'white':'black'}}>\r\n            <h1>{props.heading}</h1>\r\n            <div className=\"mb-3\">\r\n                <textarea className=\"form-control\" value={text} onChange={handleText} style={{backgroundColor : props.mode==='dark'?'grey':'white', \r\n                color : props.mode==='dark'?'white':'black'}} id=\"my-box\" rows=\"8\"></textarea>\r\n            </div>\r\n            <button className=\"btn btn-outline-primary mx-1\" onClick={handleUpText}>Convert to Uppercase</button>\r\n            <button className=\"btn btn-outline-primary mx-1\" onClick={handleLoText} >Convert to Lowercase</button>\r\n            <button className=\"btn btn-outline-primary mx-1\" onClick={handleClearText} >Clear Text</button>\r\n            <button className=\"btn btn-outline-primary mx-1\" onClick={handleCopyText} >Copy Text</button>\r\n            <button className=\"btn btn-outline-primary mx-1\" onClick={handleRemoveExtra} >Remove Extra Spaces</button>\r\n        </div>\r\n            <div className=\"container my-3\" style={{color : props.mode==='dark'?'white':'black'}}>\r\n                <h2>Your Text Summary</h2>\r\n                <p>{checkEmptyString(text)} words and {text.length} characters</p>\r\n                <p>{text.split(\" \").length * 0.008} Minutes read</p>\r\n\r\n                <h2>Preview</h2>\r\n                <p>{text.length>0?text:\"Enter some text above to preview it\"}</p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalize = (word) => {\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n            props.alert && <div className={`alert alert-${props.alert.type}`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)} </strong>: {props.alert.message}\r\n            </div>\r\n    )\r\n}\r\n","import './App.css';\nimport Navbar from './components/Navbar';\nimport TextFrom from './components/TextFrom';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\n// import About from './components/About';\n// import {\n//   BrowserRouter as Router,\n//   Routes,\n//   Route,\n// } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      message:message,\n      type:type\n    })\n\n    setTimeout(() => {\n      setAlert(null);\n    }, 1200);\n  }\n\n  const toggleMode=()=>{\n    if(mode==='light'){\n      setMode('dark');\n      document.body.style.backgroundColor='#343a40';\n      showAlert('Dark Mode has been enabled!','success');\n      setTimeout(() => {\n        document.title = \"TextUtils - Home (Dark Mode Activated)\"\n      }, 2000);\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor='white';\n      showAlert('Light Mode has been enabled!','success');\n      setTimeout(() => {\n        document.title = \"TextUtils - Home (Light Mode Activated)\"\n      }, 2000);\n    }\n  }\n  return (\n    <>\n    {/* <Router> */}\n    <Navbar title=\"TextUtils\" about=\"About Us\" mode={mode} toggleMode={toggleMode}/>\n    <Alert alert={alert}/>\n    <div className=\"container my-3\">\n    <TextFrom showAlert={showAlert} heading=\"Enter text to analyze\" mode={mode}/>\n      {/* <Routes>\n          <Route exact path=\"/about\" element={<About mode={mode}/>}/>\n          <Route exact path=\"/\" element={<TextFrom showAlert={showAlert} heading=\"Enter text to analyze\" mode={mode}/>}/>\n      </Routes> */}\n    </div>\n    {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}